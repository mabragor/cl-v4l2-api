(in-package #:v4l2-grovel)
(include "sys/ioctl.h")
(include "linux/videodev2.h")
(include "sys/fcntl.h")
(include "asm-generic/errno-base.h")
(include "asm-generic/errno.h")
(constant (vidioc-querycap "VIDIOC_QUERYCAP"))
(constant (o-rdwr "O_RDWR"))
(constant (o-nonblock "O_NONBLOCK"))

 ;; error numbers
(constant (eperm "EPERM"))
(constant (enoent "ENOENT"))
(constant (esrch "ESRCH"))
(constant (eintr "EINTR"))
(constant (eio "EIO"))
(constant (enxio "ENXIO"))
(constant (e2big "E2BIG"))
(constant (enoexec "ENOEXEC"))
(constant (ebadf "EBADF"))
(constant (echild "ECHILD"))
(constant (eagain "EAGAIN"))
(constant (enomem "ENOMEM"))
(constant (eacces "EACCES"))
(constant (efault "EFAULT"))
(constant (enotblk "ENOTBLK"))
(constant (ebusy "EBUSY"))
(constant (eexist "EEXIST"))
(constant (exdev "EXDEV"))
(constant (enodev "ENODEV"))
(constant (enotdir "ENOTDIR"))
(constant (eisdir "EISDIR"))
(constant (einval "EINVAL"))
(constant (enfile "ENFILE"))
(constant (emfile "EMFILE"))
(constant (enotty "ENOTTY"))
(constant (etxtbsy "ETXTBSY"))
(constant (efbig "EFBIG"))
(constant (enospc "ENOSPC"))
(constant (espipe "ESPIPE"))
(constant (erofs "EROFS"))
(constant (emlink "EMLINK"))
(constant (epipe "EPIPE"))
(constant (edom "EDOM"))
(constant (erange "ERANGE"))
(constant (edeadlk "EDEADLK"))
(constant (enametoolong "ENAMETOOLONG"))
(constant (enolck "ENOLCK"))
(constant (enosys "ENOSYS"))
(constant (enotempty "ENOTEMPTY"))
(constant (eloop "ELOOP"))
(constant (ewouldblock "EWOULDBLOCK"))
(constant (enomsg "ENOMSG"))
(constant (eidrm "EIDRM"))
(constant (echrng "ECHRNG"))
(constant (el2nsync "EL2NSYNC"))
(constant (el3hlt "EL3HLT"))
(constant (el3rst "EL3RST"))
(constant (elnrng "ELNRNG"))
(constant (eunatch "EUNATCH"))
(constant (enocsi "ENOCSI"))
(constant (el2hlt "EL2HLT"))
(constant (ebade "EBADE"))
(constant (ebadr "EBADR"))
(constant (exfull "EXFULL"))
(constant (enoano "ENOANO"))
(constant (ebadrqc "EBADRQC"))
(constant (ebadslt "EBADSLT"))
(constant (edeadlock "EDEADLOCK"))
(constant (ebfont "EBFONT"))
(constant (enostr "ENOSTR"))
(constant (enodata "ENODATA"))
(constant (etime "ETIME"))
(constant (enosr "ENOSR"))
(constant (enonet "ENONET"))
(constant (enopkg "ENOPKG"))
(constant (eremote "EREMOTE"))
(constant (enolink "ENOLINK"))
(constant (eadv "EADV"))
(constant (esrmnt "ESRMNT"))
(constant (ecomm "ECOMM"))
(constant (eproto "EPROTO"))
(constant (emultihop "EMULTIHOP"))
(constant (ebadmsg "EBADMSG"))
(constant (eoverflow "EOVERFLOW"))
(constant (enotuniq "ENOTUNIQ"))
(constant (ebadfd "EBADFD"))
(constant (eremchg "EREMCHG"))
(constant (elibacc "ELIBACC"))
(constant (elibbad "ELIBBAD"))
(constant (elibscn "ELIBSCN"))
(constant (elibmax "ELIBMAX"))
(constant (elibexec "ELIBEXEC"))
(constant (eilseq "EILSEQ"))
(constant (erestart "ERESTART"))
(constant (estrpipe "ESTRPIPE"))
(constant (eusers "EUSERS"))
(constant (enotsock "ENOTSOCK"))
(constant (edestaddrreq "EDESTADDRREQ"))
(constant (emsgsize "EMSGSIZE"))
(constant (eprototype "EPROTOTYPE"))
(constant (enoprotoopt "ENOPROTOOPT"))
(constant (eprotonosupport "EPROTONOSUPPORT"))
(constant (esocktnosupport "ESOCKTNOSUPPORT"))
(constant (eopnotsupp "EOPNOTSUPP"))
(constant (epfnosupport "EPFNOSUPPORT"))
(constant (eafnosupport "EAFNOSUPPORT"))
(constant (eaddrinuse "EADDRINUSE"))
(constant (eaddrnotavail "EADDRNOTAVAIL"))
(constant (enetdown "ENETDOWN"))
(constant (enetunreach "ENETUNREACH"))
(constant (enetreset "ENETRESET"))
(constant (econnaborted "ECONNABORTED"))
(constant (econnreset "ECONNRESET"))
(constant (enobufs "ENOBUFS"))
(constant (eisconn "EISCONN"))
(constant (enotconn "ENOTCONN"))
(constant (eshutdown "ESHUTDOWN"))
(constant (etoomanyrefs "ETOOMANYREFS"))
(constant (etimedout "ETIMEDOUT"))
(constant (econnrefused "ECONNREFUSED"))
(constant (ehostdown "EHOSTDOWN"))
(constant (ehostunreach "EHOSTUNREACH"))
(constant (ealready "EALREADY"))
(constant (einprogress "EINPROGRESS"))
(constant (estale "ESTALE"))

(cstruct v4l2-capability "struct v4l2_capability"
	 (driver "driver" :type :char :count 16)
	 (card "card" :type :char :count 32)
	 (bus-info "bus_info" :type :char :count 32)
	 (version "version" :type :int)
	 (capabilities "capabilities" :type :int)
	 (reserved "reserved" :type :int :count 4))

;;; Capabilities constants (pilfered from v4l2)

#.(labels ((flatten-stringify-sym-list (lst)
	     (iter (for elt in lst)
		   (if (atom elt)
		       (collect (string elt))
		       (appending (mapcar (lambda (x)
					    (format nil "~a-~a" (car elt) x))
					  (flatten-stringify-sym-list (cdr elt)))))))
	   (vidioc-constants (sym-names)
	     (let ((fl-str (flatten-stringify-sym-list sym-names)))
	       `(progn ,@(mapcar (lambda (sym-name)
				   `(constant (,(intern sym-name)
						,(cl-ppcre:regex-replace-all
						  "-" sym-name "_"))))
				 (mapcar (lambda (x)
					   (format nil "VIDIOC-~a" x))
					 fl-str)))))
	   (v4l2-constants (sym-names)
	     (let ((fl-str (flatten-stringify-sym-list sym-names)))
	       `(progn ,@(mapcar (lambda (sym-name)
				   `(constant (,(intern sym-name)
						,(format nil "V4L2_~a"
							 (cl-ppcre:regex-replace-all
							  "-" sym-name "_")))))
				 fl-str)))))
    `(progn
      ;; capabilities
       ,(v4l2-constants '((cap (video capture output overlay output-overlay)
			   (vbi capture output)
			   (sliced-vbi capture output)
			   rds-capture
			   hw-freq-seek
			   tuner
			   audio
			   radio
			   readwrite
			   asyncio
			   streaming)))
      (constant (vidioc-enuminput "VIDIOC_ENUMINPUT"))
      (cstruct v4l2-input "struct v4l2_input"
	       (index "index" :type :int)
	       (name "name" :type :char :count 32)
	       (type "type" :type :int)
	       (audioset "audioset" :type :int)
	       (tuner "tuner" :type :int)
	       (std "std" :type :int64) ; not very elegant, but anyways
	       (status "status" :type :int)
	       (reserved "reserved" :type :int :count 4))
      ;; input types
      ,(v4l2-constants '((input-type tuner camera)))
      ;; input standards
      ,(v4l2-constants '((std (pal b b1 g h i d d1 k m n nc |60|)
			  (ntsc m m-jp |443| m-kr)
			  (secam b d g h k k1 l lc)
			  (atsc 8-vsb |16| vsb)
			  ;; composite constants
			  (pal bg dk)
			  (secam dk)
			  b hg
			  pal
			  ntsc
			  dk
			  secam
			  525-60
			  mn
			  625-50
			  unknown
			  all)))
      ;; Input statuses
      ,(v4l2-constants '((in-st no-power no-signal no-color hflip vflip no-h-lock
			  color-kill no-sync no-equ no-carrier macrovision no-access
			  vtr)))
      ;; Quering video output
      (constant (vidioc-enumoutput "VIDIOC_ENUMOUTPUT"))
      (cstruct v4l2-output "struct v4l2_output"
	       (index "index" :type :int)
	       (name "name" :type :char :count 32)
	       (type "type" :type :int)
	       (audioset "audioset" :type :int)
	       (modulator "modulator" :type :int)
	       (std "std" :type :int64)
	       (reserved "reserved" :type :int :count 4))
      ;; output types
      ,(v4l2-constants '((output-type modulator analog analog-vga-overlay)))
      ;; get/set video input output
      ,(vidioc-constants '((g input output) (s input output)))
      ;; query audio inputs
      (constant (vidioc-enumaudio "VIDIOC_ENUMAUDIO"))
      (cstruct v4l2-audio "struct v4l2_audio"
	       (index "index" :type :int)
	       (name "name" :type :char :count 32)
	       (capability "capability" :type :int)
	       (mode "mode" :type :int)
	       (reserved "reserved" :type :int :count 2))
      ,(v4l2-constants '((audcap stereo avl) (audmode avl)))
      ;;query audio outputs
      (constant (vidioc-enumaudout "VIDIOC_ENUMAUDOUT"))
      (cstruct v4l2-audioout "struct v4l2_audioout"
	       (index "index" :type :int)
	       (name "name" :type :char :count 32)
	       (capability "capability" :type :int)
	       (mode "mode" :type :int)
	       (reserved "reserved" :type :int :count 2))
      ;; set/get audio input/output
      ,(vidioc-constants '((g audio audout) (s audio audout)))
      ;; user control ids
      ,(v4l2-constants '((cid base user-base brightness contrast saturation hue
			  (audio volume balance bass treble mute))))
      ))
